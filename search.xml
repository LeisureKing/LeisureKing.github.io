<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>对象的序列化与反序列化</title>
      <link href="/2019/06/16/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2019/06/16/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      <content type="html"><![CDATA[<p><strong>序列化与反序列化</strong></p><p>序列化 (Serialization)是将对象的状态信息转换为可以存储或传输的形式的过程。一般将一个对象存储至一个储存媒介，例如档案或是记亿体缓冲等。在网络传输过程中，可以是字节或是XML等格式。而字节的或XML编码格式可以还原完全相等的对象。这个相反的过程又称为反序列化。</p><p>Java对象的序列化与反序列化<br>在Java中，我们可以通过多种方式来创建对象，并且只要对象没有被回收我们都可以复用该对象。但是，我们创建出来的这些Java对象都是存在于JVM的堆内存中的。只有JVM处于运行状态的时候，这些对象才可能存在。一旦JVM停止运行，这些对象的状态也就随之而丢失了。</p><p>但是在真实的应用场景中，我们需要将这些对象持久化下来，并且能够在需要的时候把对象重新读取出来。Java的对象序列化可以帮助我们实现该功能。</p><p>对象序列化机制（object serialization）是Java语言内建的一种对象持久化方式，通过对象序列化，可以把对象的状态保存为字节数组，并且可以在有需要的时候将这个字节数组通过反序列化的方式再转换成对象。对象序列化可以很容易的在JVM中的活动对象和字节数组（流）之间进行转换。</p><p>在Java中，对象的序列化与反序列化被广泛应用到RMI(远程方法调用)及网络传输中。</p><a id="more"></a><p><strong>Serializable 接口</strong></p><p>类通过实现 java.io.Serializable 接口以启用其序列化功能。未实现此接口的类将无法使其任何状态序列化或反序列化。可序列化类的所有子类型本身都是可序列化的。序列化接口没有方法或字段，仅用于标识可序列化的语义。 (该接口并没有方法和字段，为什么只有实现了该接口的类的对象才能被序列化呢？)</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Task3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//Initializes The Object</span><br>        User[] users = &#123;<span class="hljs-keyword">new</span> User(<span class="hljs-string">"zhansan"</span>,<span class="hljs-number">30</span>),<span class="hljs-keyword">new</span> User(<span class="hljs-string">"lisi"</span>,<span class="hljs-number">30</span>),<span class="hljs-keyword">new</span> User(<span class="hljs-string">"wangwu"</span>,<span class="hljs-number">32</span>)&#125;;<br>        System.out.println(users);<br> <br>        <span class="hljs-comment">//对象写入文件</span><br>        ObjectOutputStream oos = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            oos = <span class="hljs-keyword">new</span> ObjectOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">"user.dat"</span>));<br>            <span class="hljs-keyword">for</span> (User user : users) &#123;<br>                oos.writeObject(user);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            oos.close();<br>        &#125;<br> <br>        <span class="hljs-comment">//对象读取文件</span><br>        File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">"user.dat"</span>);<br>        ObjectInputStream ois = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ois = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> FileInputStream(file));<br>            <span class="hljs-keyword">for</span> (User user : users) &#123;<br>                User newUser = (User) ois.readObject();<br>                System.out.println(newUser);<br>            &#125;<br>           <br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            ois.close();<br>        &#125;<br> <br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1L</span>;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>();<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Person [name="</span> + name + <span class="hljs-string">", age="</span> + age + <span class="hljs-string">"]"</span>;<br>    &#125;       <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>字符流与字节流</title>
      <link href="/2019/06/04/%E5%AD%97%E7%AC%A6%E6%B5%81%E4%B8%8E%E5%AD%97%E8%8A%82%E6%B5%81/"/>
      <url>/2019/06/04/%E5%AD%97%E7%AC%A6%E6%B5%81%E4%B8%8E%E5%AD%97%E8%8A%82%E6%B5%81/</url>
      <content type="html"><![CDATA[<p><img src="http://image.iamber.top/FlX4mpYSHHKT1r6hDOggABeiaONO" alt=""><br><img src="http://image.iamber.top/Fmy5k8FewR844e1z_dmt6Yhtp_Ey" alt=""><br><a id="more"></a></p><p><strong>字节流与字符流的区别</strong></p><p>字节流在操作的时候本身是不会用到缓冲区（内存）的,是与文件本身直接操作的,而字符流在操作的时<br>候是使用到缓冲区的。</p><p><strong>字节流与字符流的选择</strong></p><p>•所有的文件在硬盘或在传输的时候都是以字节的方式进行的,包括图片等都是按字节的方式存储的。</p><p>•而字符是只有在内存中才会形成,所以在开发中,字节流使用较为广泛。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>OOP开闭原则</title>
      <link href="/2019/06/03/OOP%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/"/>
      <url>/2019/06/03/OOP%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/</url>
      <content type="html"><![CDATA[<p><strong>定义：</strong></p><p>OCP：Open for extention, Closed for modification Principle，即对扩展开放，对修改关闭原则</p><p><strong>该原则的思想是：</strong></p><p>可以通过扩展来满足变化，而不需要修改代码，或者说在设计一个模块的时候，应当使这个模块可以在不被<br>修改的前提下被扩展。</p><p><strong>实现 ：</strong></p><ul><li><p>实现开闭原则的关键是抽象</p></li><li><p>定义一个抽象层，只规定功能而不提供实现，实现通过定义具体类来完成</p></li><li><p>当需求变化时，不是通过修改抽象层来完成，而是通过定义抽象层的新实现完成，即通过扩展来完成</p></li><li><p>通过抽象类及接口，规定了具体类的特征作为抽象层，相对稳定，不需修改，从而满足“对修改关闭”</p></li><li><p>从抽象类导出的具体类可以改变系统的行为，从而满足“对扩展开放”</p></li></ul><a id="more"></a><p><strong>好处 ：</strong></p><ul><li><p>通过扩展已有软件系统，可提供新的行为，以满足对软件的新需求，提高了软件系统的适应性和灵活性</p></li><li><p>已有的软件模块，特别是最重要的抽象层模块不能再修改，提高了软件系统的一定的稳定性和延续性</p></li><li><p>这样的设计同时也满足了可复用性与可维护性;</p></li></ul><p><strong>原设计</strong><br><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Salary</span> </span>&#123; <span class="hljs-comment">// 工资类</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">computerSalary</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"采用工资算法一计算工资"</span>);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Accountant</span> </span>&#123; <span class="hljs-comment">// 会计类</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ComputerSalary</span><span class="hljs-params">(Salary salary)</span> </span>&#123;<br>        salary.computerSalary();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestOCP</span> </span>&#123; <span class="hljs-comment">// 测试类</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Accountant accountant = <span class="hljs-keyword">new</span> Accountant ();<br>        accountant.ComputerSalary(<span class="hljs-keyword">new</span> Salary());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>需求发生变化，按照工资算法二计算工资，如何实现呢?<br>通过修改Salary类的computerSalary() 来实现，不利于程序的稳定。</p><p>所以可以使用开闭原则重新设计类。</p><p><strong>修改后</strong><br><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Salary</span> </span>&#123; <span class="hljs-comment">// 工资接口</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">computerSalary</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BeijingSalary</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Salary</span> </span>&#123; <span class="hljs-comment">// 北京工资实现类</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">computerSalary</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"采用工资算法一计算工资"</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HebeiSalary</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Salary</span> </span>&#123; <span class="hljs-comment">// 河北工资实现类</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">computerSalary</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"采用工资算法二计算工资"</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Accountant</span> </span>&#123; <span class="hljs-comment">// 会计类</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ComputerSalary</span><span class="hljs-params">(Salary salary)</span> </span>&#123;<br>        salary.computerSalary();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestOCP</span> </span>&#123; <span class="hljs-comment">// 测试类</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Accountant accountant = <span class="hljs-keyword">new</span> Accountant();<br>        accountant.ComputerSalary(<span class="hljs-keyword">new</span> BeijingSalary());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java中的enum类的使用</title>
      <link href="/2019/06/01/Java%E4%B8%AD%E7%9A%84enum%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/06/01/Java%E4%B8%AD%E7%9A%84enum%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>创建枚举类型要使用 enum 关键字，隐含了所创建的类型都是 java.lang.Enum 类的子类（java.lang.Enum 是一个抽象类）。枚举类型符合通用模式 Class Enum&lt;E extends Enum<e>&gt;，而 E表示枚举类型的名称。枚举类型的每一个值都将映射到 protected Enum(String name, int ordinal) 构造函数中，在这里，每个值的名称都被转换成一个字符串，并且序数设置表示了此设置被创建的顺序。</e></p><a id="more"></a><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Task4</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(Season.SPRING.toString());<br>        <span class="hljs-comment">// valueof()匹配枚举类中相同字符串的成员</span><br>        System.out.println(Season.valueOf(<span class="hljs-string">"SUMMER"</span>));<span class="hljs-comment">// ordinal 返回序号</span><br>        System.out.println(Season.AUTUMN.ordinal());<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">enum</span> Season &#123;<br>    SPRING(<span class="hljs-string">"春天"</span>, <span class="hljs-string">"春风又绿江南岸"</span>), SUMMER(<span class="hljs-string">"夏天"</span>, <span class="hljs-string">"映日荷花别样红"</span>), <br>    AUTUMN(<span class="hljs-string">"秋天"</span>, <span class="hljs-string">"秋水共长天一色"</span>), WINTER(<span class="hljs-string">"冬天"</span>, <span class="hljs-string">"窗含西岭千秋雪"</span>);<br><br>    <span class="hljs-keyword">private</span> String seasonName;<br>    <span class="hljs-keyword">private</span> String seasonDesc;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Season</span><span class="hljs-params">(String seasonName, String seasonDesc)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.seasonDesc = seasonDesc;<br>        <span class="hljs-keyword">this</span>.seasonName = seasonName;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> seasonName + <span class="hljs-string">":"</span> + seasonDesc;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SimpleDateFormat 格式化日期</title>
      <link href="/2019/05/31/SimpleDateFormat-%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%97%A5%E6%9C%9F/"/>
      <url>/2019/05/31/SimpleDateFormat-%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%97%A5%E6%9C%9F/</url>
      <content type="html"><![CDATA[<p>白话文的讲：这些A——Z，a——z这些字母(不被单引号包围的)会被特殊处理替换为对应的日期时间，其他的字符串还是原样输出。<br>日期和时间模式(注意大小写，代表的含义是不同的)</p><p><img src="http://image.iamber.top/FleVj3Dr6BJNp9RW2wE9ypGfHfwM" alt=""><br><a id="more"></a></p><p>yyyy：年</p><p>MM：月</p><p>dd：日</p><p>hh：1~12小时制(1-12)</p><p>HH：24小时制(0-23)</p><p>mm：分</p><p>ss：秒</p><p>S：毫秒</p><p>E：星期几</p><p>D：一年中的第几天</p><p>F：一月中的第几个星期(会把这个月总共过的天数除以7)</p><p>w：一年中的第几个星期</p><p>W：一月中的第几星期(会根据实际情况来算)</p><p>a：上下午标识</p><p>k：和HH差不多，表示一天24小时制(1-24)。</p><p>K：和hh差不多，表示一天12小时制(0-11)。</p><p>z：表示时区</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTime2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MyDateTime</span> </span>&#123;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getDate</span><span class="hljs-params">()</span> </span>&#123;<br>        SimpleDateFormat format = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">"yyyy-MM-dd"</span>);<br>        <span class="hljs-keyword">return</span> format.format(<span class="hljs-keyword">new</span> Date());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getDateTime</span><span class="hljs-params">()</span> </span>&#123;<br>        SimpleDateFormat format = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">"yyyy-MM-dd HH:mm:ss.S"</span>);<br>        <span class="hljs-keyword">return</span> format.format(<span class="hljs-keyword">new</span> Date());<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>windows 超简单安装scrapy</title>
      <link href="/2019/01/20/windows-%E8%B6%85%E7%AE%80%E5%8D%95%E5%AE%89%E8%A3%85scrapy/"/>
      <url>/2019/01/20/windows-%E8%B6%85%E7%AE%80%E5%8D%95%E5%AE%89%E8%A3%85scrapy/</url>
      <content type="html"><![CDATA[<p>最近在学习爬虫，准备学习一波scrapy框架。打算先在自己电脑用一下爬虫框架，之后试一试服务器跑爬虫。</p><p>我百度了一下安装教程，挺长的，找了几个安装教程都出错了，而后发现了一个超级简单的方法。</p><p>先下载一个<code>Miniconda</code>  下载地址：<a href="https://conda.io/miniconda.html" target="_blank" rel="noopener">https://conda.io/miniconda.html</a> 选择合适的版本安装。</p><p>然后就一行命令<br><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda install scrapy<br></code></pre></td></tr></table></figure></p><p>ok!然后就可以了！超级简单有木有呀！</p><p>验证安装是否成功，win+R 输入cmd 打开命令行窗口，输入下列代码出现版本信息就ok！<br><figure class="hljs highlight CMD"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CMD">scrapy -h<br></code></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 经验 </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>利用阿里云服务器挖矿</title>
      <link href="/2018/12/26/%E5%88%A9%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8C%96%E7%9F%BF/"/>
      <url>/2018/12/26/%E5%88%A9%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8C%96%E7%9F%BF/</url>
      <content type="html"><![CDATA[<p>买了阿里云服务器的学生套餐好久但是一直没啥用，一直都是用来当作web项目存放器，感觉特别浪费。</p><p>后来突发奇想，想用服务器来挖矿，然后就找了一波相关知识。具体来说用服务器挖矿主要是用cpu，而cpu的话门罗币比较支持。我用的ubantu16.04版本。</p><p>挖矿前准备好的东西：<br>1、 交易账号<br>2、 钱包地址<br>3.、一台Linux服务器</p><p>一、申请一个钱包</p><p>这里申请一个在线钱包，打开网址（<a href="https://mymonero.com/#/）点击创建账户" target="_blank" rel="noopener">https://mymonero.com/#/）点击创建账户</a></p><p>然后把<code>Private Login Key</code>放入<code>Confirm your Private Login Key</code>中点击验证即可</p><a id="more"></a><p><img src="http://image.iamber.top//18-12-26/4474354.jpg" alt=""></p><p>需要保存 Private Login Key 和 出来的 address</p><p><img src="http://image.iamber.top//18-12-26/25192495.jpg" alt=""></p><p>二、安装挖矿软件</p><p>具体代码<br><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo apt-get -y install git<br><br>$ git <span class="hljs-built_in">clone</span> https://github.com/fireice-uk/xmr-stak-cpu.git<br><br>$ sudo apt-get -y install libmicrohttpd-dev libssl-dev cmake build-essential<br><br>$ <span class="hljs-built_in">cd</span> xmr-stak-cpu/<br><br>$ cmake -DHWLOC_ENABLE=OFF <br><br>$ make install<br></code></pre></td></tr></table></figure></p><p><img src="http://image.iamber.top//18-12-26/43913409.jpg" alt=""></p><p>得到上图结果表示基本安装成功</p><p>三、配置相关文件</p><p>进入bin目录</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> bin<br><br>$ ./xmr-stak-cpu<br></code></pre></td></tr></table></figure><p><img src="http://image.iamber.top//18-12-26/524436.jpg" alt=""><br>得到结果如上图</p><p>将红色框内容复制到config.txt中去，也就是将下图红色框内的东西替换。</p><p><img src="http://image.iamber.top//18-12-26/64559123.jpg" alt=""></p><p>先别急，还需要用到config.txt。在里面找到</p><p>“pool_address” : “pool.usxmrpool.com:3333”,</p><p>“wallet_address” : “”,</p><p>“pool_password” : “”,</p><p>第一个参数是矿池地址。推荐几个，找到合适的主机地址和端口号填入一个参数里面</p><p><a href="http://minexmr.com/#" target="_blank" rel="noopener">http://minexmr.com/#</a></p><p><a href="https://monerohash.com/" target="_blank" rel="noopener">https://monerohash.com/</a></p><p><a href="http://pool.monero.org/" target="_blank" rel="noopener">http://pool.monero.org/</a></p><p>第二个参数是钱包地址，之前讲过，直接放入其中就可以</p><p>第三个参数是密码，一般填个x就可以。填完保存退出。</p><p>四、 现在开始挖矿</p><p>进入挖矿软件的bin目录，运行代码就可以看到挖矿开始，同时放到了后台，不会随ssh断开停止进程。</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ nohup ./xmr-stak-cpu<br></code></pre></td></tr></table></figure><p><img src="http://image.iamber.top//18-12-26/36962576.jpg" alt=""></p><p>五、 查看收益</p><p>打开下面网址，在搜索框输入钱包地址就可以看到，不过需要等挖矿挖了好长一段时间才能看到。</p><p><a href="https://xmr.nanopool.org/" target="_blank" rel="noopener">https://xmr.nanopool.org/</a></p>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 挖矿 </tag>
            
            <tag> Linux </tag>
            
            <tag> 门罗币 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>分享一款自制的小软件</title>
      <link href="/2018/08/29/%E5%88%86%E4%BA%AB%E4%B8%80%E6%AC%BE%E8%87%AA%E5%88%B6%E7%9A%84%E5%B0%8F%E8%BD%AF%E4%BB%B6/"/>
      <url>/2018/08/29/%E5%88%86%E4%BA%AB%E4%B8%80%E6%AC%BE%E8%87%AA%E5%88%B6%E7%9A%84%E5%B0%8F%E8%BD%AF%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h2 id="分享一款时钟软件，自我感觉比较好看。搭配win10效果不错。"><a href="#分享一款时钟软件，自我感觉比较好看。搭配win10效果不错。" class="headerlink" title="分享一款时钟软件，自我感觉比较好看。搭配win10效果不错。"></a>分享一款时钟软件，自我感觉比较好看。搭配win10效果不错。</h2><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="http://image.iamber.top//18-10-20/55755888.jpg" alt="展示"></p><a id="more"></a><p>如果你喜欢隐藏下面的任务栏，这款软件就很不错，简洁美观。特别是这款软件内存小，而且可以搭配 <code>wallpaper engine</code> 使用效果特别不错。</p><p>这款软件没有做开机自启动，当时想着自己用，没必要这么麻烦。如果想要开机自启动的话，在Windows文件管理器中输入<code>%APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup</code>可以打开一个文件夹，把软件或者快捷方式放到里面就可以了。修改注册表的方法就不推荐了。</p><p>有想要源码的可以私聊我 QQ：441169995。</p><h2 id="百度网盘："><a href="#百度网盘：" class="headerlink" title="百度网盘："></a>百度网盘：</h2><p>链接：<a href="https://pan.baidu.com/s/1RDatufeJcoBKnKdEF3iQnQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1RDatufeJcoBKnKdEF3iQnQ</a><br>密码：t422</p>]]></content>
      
      <categories>
          
          <category> 资源 </category>
          
          <category> 实用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
            <tag> 时钟 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>测试</title>
      <link href="/2018/08/28/myblog/"/>
      <url>/2018/08/28/myblog/</url>
      <content type="html"><![CDATA[<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p><img src="http://image.iamber.top//18-10-20/93949912.jpg" alt="测试"><br><a id="more"></a><br><a href="https://baidu.com" target="_blank" rel="noopener">baidu</a></p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">py</span></span>&#123;<br>    syso();   <br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th>姓名</th><th>年龄</th></tr></thead><tbody><tr><td>康宁老杀头鬼</td><td>15</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> 测试 </category>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> live </tag>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/08/25/hello-world/"/>
      <url>/2018/08/25/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<h1 id="一条悠闲的咸鱼"><a href="#一条悠闲的咸鱼" class="headerlink" title="一条悠闲的咸鱼"></a>一条悠闲的咸鱼</h1><p>有问题可以用QQ联系我</p><p>QQ: 441169995</p>]]></content>
    </entry>
    
  
</search>
